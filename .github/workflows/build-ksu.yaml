name: Build GKI Kernel with KernelSU + SUSFS4KSU

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup environment
      run: |
        sudo apt-get update && sudo apt-get install -y git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses-dev lib32ncurses-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig bc cpio rsync python3
        curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/bazel-archive-keyring.gpg > /dev/null
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
        sudo apt-get update && sudo apt-get install -y bazel
        mkdir -p ~/.bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo && chmod a+rx ~/.bin/repo
        echo ~/.bin >> $GITHUB_PATH
        
    - name: Clone kernel source
      run: |
        git config --global user.name "GitHub Actions" && git config --global user.email "actions@github.com"
        mkdir android-kernel && cd android-kernel
        repo init -u https://android.googlesource.com/kernel/manifest -b common-android14-6.1-lts --depth=1
        repo sync -j$(nproc)
        
    - name: Integrate official KernelSU
      run: |
        cd android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
                
    - name: Setup SUSFS4KSU and apply patches
      run: |
        cd android-kernel
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1 susfs4ksu
        
        # Apply SUSFS patches if available
        if [ -f "./susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch" ]; then
          cp ./susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch KernelSU/
          cd KernelSU && patch -p1 --dry-run < 10_enable_susfs_for_ksu.patch >/dev/null 2>&1 && patch -p1 < 10_enable_susfs_for_ksu.patch && echo "Applied KernelSU SUSFS patch" && cd ..
        fi
        
        if [ -f "./susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch" ]; then
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch common/
          cd common && patch -p1 --dry-run < 50_add_susfs_in_gki-android14-6.1.patch >/dev/null 2>&1 && patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch && echo "Applied kernel SUSFS patch" && cd ..
        fi
        
    - name: Configure and build kernel
      run: |
        cd android-kernel
        
        # Remove ABI dependencies and defconfig checks
        sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' common/BUILD.bazel
        rm -f common/android/abi_gki_protected_exports_*
        sed -i 's/check_defconfig//' ./common/build.config.gki
        
        # Add KSU and SUSFS configs
        echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
        
        # Build kernel
        [ -f build_env.sh ] && source build_env.sh
        export KSU_GIT_VERSION="${{ env.KSUGITVER }}" KSUVER="${{ env.KSUVER }}"
        bazel build //common:kernel_aarch64_dist
        
    - name: Prepare artifacts
      run: |
        cd android-kernel
        mkdir -p artifacts
        
        # Get bazel output directory
        BAZEL_BIN=$(bazel info bazel-bin)
        DIST_DIR="$BAZEL_BIN/common/kernel_aarch64_dist"
        
        echo "Bazel bin directory: $BAZEL_BIN"
        echo "Distribution directory: $DIST_DIR"
        echo "Contents of dist directory:"
        ls -la "$DIST_DIR" || echo "Dist directory not found, checking bazel-bin structure:"
        find "$BAZEL_BIN" -name "*Image*" -o -name "*.dtb" -o -name "*.dtbo" 2>/dev/null || echo "No kernel images found"
        
        # Copy all kernel related files from bazel output
        if [ -d "$DIST_DIR" ]; then
          # Copy everything from the distribution directory
          cp -r "$DIST_DIR"/* artifacts/ 2>/dev/null || true
        else
          # Fallback: search entire bazel-bin for kernel files
          find "$BAZEL_BIN" -type f \( -name "Image*" -o -name "*.dtb" -o -name "*.dtbo" -o -name "*.ko" -o -name "System.map" -o -name "vmlinux" -o -name "*.img" \) -exec cp {} artifacts/ \; 2>/dev/null || true
        fi
        
        # Also check for any compressed kernel images
        find "$BAZEL_BIN" -name "*.gz" -o -name "*.lz4" -o -name "*.bz2" | head -20 | xargs -I {} cp {} artifacts/ 2>/dev/null || true
        
        # Create build info
        echo "Build Date: $(date)" > artifacts/build-info.txt
        echo "KernelSU Version: ${{ env.KSUVER }}" >> artifacts/build-info.txt
        echo "KernelSU Git Version: ${{ env.KSUGITVER }}" >> artifacts/build-info.txt
        echo "Kernel: Android14-6.1-LTS + KernelSU + SUSFS4KSU" >> artifacts/build-info.txt
        
        echo "Final artifacts:"
        ls -la artifacts/
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-ksu${{ env.KSUVER }}-$(date +%Y%m%d-%H%M)
        path: android-kernel/artifacts/
        retention-days: 30
