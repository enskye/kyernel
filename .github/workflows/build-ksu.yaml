name: Build GKI Kernel with KernelSU + SUSFS4KSU

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses-dev lib32ncurses-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig bc cpio rsync python3
        curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/bazel-archive-keyring.gpg > /dev/null
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
        sudo apt-get update && sudo apt-get install -y bazel
        
    - name: Setup repo tool
      run: |
        mkdir -p ~/.bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
        chmod a+rx ~/.bin/repo
        echo ~/.bin >> $GITHUB_PATH
        
    - name: Clone kernel source
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        mkdir android-kernel && cd android-kernel
        repo init -u https://android.googlesource.com/kernel/manifest -b common-android14-6.1-lts --depth=1
        repo sync -j$(nproc)
        
    - name: Setup KernelSU
      run: |
        cd android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
        
        # Set KSU_GIT_VERSION to fix the versioning warning
        cd KernelSU
        KSU_VERSION=$(git describe --abbrev=12 --tags --always 2>/dev/null || echo "v0.9.5-unknown")
        echo "export KSU_GIT_VERSION=$KSU_VERSION" >> ../build_env.sh
        echo "KSU_GIT_VERSION set to: $KSU_VERSION"
        cd ..
        
    - name: Setup SUSFS4KSU
      run: |
        cd android-kernel
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1 susfs4ksu
        

    - name: Configure defconfig
      run: |
        cd android-kernel
        
        # Remove ABI exports dependency from BUILD.bazel and delete the files
        sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' common/BUILD.bazel
        rm -f common/android/abi_gki_protected_exports_*
        
        # Remove check_defconfig to avoid defconfig validation errors
        sed -i 's/check_defconfig//' ./common/build.config.gki
        
    - name: Apply SUSFS patches and configure
      run: |
        cd android-kernel
        
        # First, let's check what KernelSU setup already provides
        echo "Checking existing KernelSU configuration:"
        find KernelSU/ -name "Kconfig*" -exec grep -l "KSU" {} \; 2>/dev/null || echo "No KSU Kconfig found"
        
        # Check if SUSFS support is already built into KernelSU
        if grep -r "SUSFS" KernelSU/ 2>/dev/null; then
          echo "SUSFS support found in KernelSU"
          # Just enable basic KSU - SUSFS might be auto-enabled
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
        else
          echo "No built-in SUSFS support, attempting manual integration"
          
          # Debug: List available patch files
          echo "Available patch files:"
          find ./susfs4ksu/kernel_patches/ -name "*.patch" 2>/dev/null || echo "No patch files found"
          
          # Try to apply only essential patches without forcing
          if [ -f "./susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch" ]; then
            cp ./susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch KernelSU/
            cd KernelSU
            if patch -p1 --dry-run < 10_enable_susfs_for_ksu.patch >/dev/null 2>&1; then
              patch -p1 < 10_enable_susfs_for_ksu.patch
              echo "Successfully applied KernelSU SUSFS patch"
            else
              echo "KernelSU patch cannot be applied cleanly, skipping"
            fi
            cd ..
          fi
          
          # Copy and apply kernel patches only if they can be applied cleanly  
          if [ -f "./susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch" ]; then
            cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch common/
            cd common
            if patch -p1 --dry-run < 50_add_susfs_in_gki-android14-6.1.patch >/dev/null 2>&1; then
              patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch
              echo "Successfully applied kernel SUSFS patch"
            else
              echo "Kernel patch cannot be applied cleanly"
            fi
            cd ..
          fi
        fi
        
    - name: Configure defconfig  
      run: |
        cd android-kernel
        
        # Remove ABI exports dependency from BUILD.bazel and delete the files
        sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' common/BUILD.bazel
        rm -f common/android/abi_gki_protected_exports_*
        
        # Remove check_defconfig to avoid defconfig validation errors
        sed -i 's/check_defconfig//' ./common/build.config.gki
        
        # Add KSU and SUSFS configs
        echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
        
    - name: Build kernel
      run: |
        cd android-kernel
        # Source the build environment if it exists
        [ -f build_env.sh ] && source build_env.sh
        bazel build //common:kernel_aarch64_dist
               
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build
        path: android-kernel/output/*
