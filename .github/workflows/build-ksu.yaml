name: Build GKI Kernel with KernelSU + SUSFS4KSU

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup build environment
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential bc bison flex git-core curl \
          python3 python3-dev libssl-dev cpio rsync \
          zip unzip
        
    - name: Setup repo tool
      run: |
        mkdir -p ~/.local/bin
        curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo -o ~/.local/bin/repo
        chmod +x ~/.local/bin/repo
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Configure git
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        
    - name: Create workspace and get build info
      run: |
        BUILD_DATE=$(date +"%Y%m%d")
        BUILD_TIME=$(date +"%H%M")
        KERNEL_NAME="kyernel-${BUILD_DATE}-${BUILD_TIME}"
        echo "BUILD_DATE_FORMATTED=$(date +"%Y-%m-%d")" >> $GITHUB_ENV
        echo "BUILD_TIME_FORMATTED=$(date +"%H:%M")" >> $GITHUB_ENV
        echo "KERNEL_NAME=${KERNEL_NAME}" >> $GITHUB_ENV
        
    - name: Clone kernel source
      run: |
        mkdir android-kernel && cd android-kernel
        repo init -u https://android.googlesource.com/kernel/manifest \
          -b common-android14-6.1-2025-06 --depth=1 --no-clone-bundle
        repo sync -c -j$(nproc) --no-tags --optimized-fetch
        
    - name: Setup KernelSU
      run: |
        cd android-kernel
        
        # Setup KernelSU
        curl -fsSL "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
        
        # Get KSU version
        cd KernelSU
        BASE_VERSION=10200
        COMMIT_COUNT=$(git rev-list --count HEAD)
        KSU_VERSION=$((COMMIT_COUNT + BASE_VERSION))
        echo "KSU_GIT_VERSION=$KSU_VERSION" >> $GITHUB_ENV
        echo "KernelSU version: $KSU_VERSION"
        cd .
        export KSU_GIT_VERSION="$KSU_VERSION"
        
    - name: Clone repositories
      run: |
        cd android-kernel
        
        # Clone SUSFS
        git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1 susfs4ksu
        
        # Clone hooks patches
        git clone --depth=1 https://github.com/enskye/kernel_patches.git -b main kernel_patches

        # Clone AnyKernel3
        git clone --depth=1 https://github.com/enskye/AnyKernel3.git -b gki-2.0 AnyKernel3
        
        # Apply SUSFS patches
        cp susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        cp susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch KernelSU/
        cp susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch ./common/
        cp kernel_patches/60_scope-minimized_manual_hooks.patch  ./common/
        cd KernelSU
        patch -p1 --fuzz=3 < 10_enable_susfs_for_ksu.patch
        cd ../common
        patch -p1 --fuzz=3 < 50_add_susfs_in_gki-android14-6.1.patch
        patch -p1 --fuzz=3 < 60_scope_minimized_hooks_ksu_1.4.patch
        
        
    - name: Configure kernel options
      run: |
        cd android-kernel/common/arch/arm64/configs
        echo "CONFIG_KSU=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=n" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> gki_defconfig
        echo "CONFIG_KSU_USFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> gki_defconfig
        echo "CONFIG_KSU_KPROBES_HOOK=n" >> gki_defconfig

        # Apply additional configs
        
        echo "CONFIG_OVERLAY_FS=y" >> gki_defconfig
        echo "CONFIG_TMPFS_XATTR=y" >> gki_defconfig

    - name: Modify uname
      run: |
        cd android-kernel
        echo 'echo "-kyernel"' > ./common/scripts/setlocalversion
        
    - name: Build kernel
      run: |
        cd android-kernel
        
        # Remove ABI dependencies just before building
        sed -i '/protected_exports_list.*abi_gki_protected_exports_aarch64/d' common/BUILD.bazel
        rm -f common/android/abi_gki_protected_exports_*
        sed -i 's/check_defconfig//' common/build.config.gki
        
        
        # Use the kernel's built-in bazel wrapper (tools/bazel)
        tools/bazel run //common:kernel_aarch64_dist --config=fast --config=stamp --lto=thin -- --destdir=out/dist

    - name: Package with AnyKernel3
      run: |
        # This step copies the compiled kernel image (Image.lz4) from the output
        # directory into the AnyKernel3 folder, which is the standard place for it.
        cp android-kernel/out/dist/Image.lz4 android-kernel/AnyKernel3/
        
        # We navigate into the AnyKernel3 directory to prepare for zipping.
        cd android-kernel/AnyKernel3
        
        # This command creates the flashable zip.
        # 'zip -r9' creates a recursive zip with the highest compression level.
        # The output zip will be named using the KERNEL_NAME variable we set earlier
        # (e.g., kyernel-20250831-2024.zip) and placed in the parent directory.
        # We exclude the .git folder and README to keep the zip clean.
        zip -r9 ../${{ env.KERNEL_NAME }}.zip * -x .git/\* README.md/\*

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        # This sets the name of the release, using the KERNEL_NAME variable.
        name: Release ${{ env.KERNEL_NAME }}
        
        # This creates a Git tag for the release, which is required.
        tag_name: ${{ env.KERNEL_NAME }}
        
        # You can customize the body of the release message here.
        # We're using the build date/time and KernelSU version from earlier steps.
        body: |
          Kernel built on: ${{ env.BUILD_DATE_FORMATTED }} at ${{ env.BUILD_TIME_FORMATTED }}
          KernelSU version: ${{ env.KSU_GIT_VERSION }}
        
        # This tells the action which file(s) to upload as release assets.
        files: android-kernel/${{ env.KERNEL_NAME }}.zip
        
        # This option will cause the workflow to fail if the zip file isn't found.
        fail_on_unmatched_files: true

    # --- This is your existing final step ---
               
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build
        path: android-kernel/out/dist/*
