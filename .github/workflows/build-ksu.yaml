name: Build GKI Kernel with KernelSU + SUSFS4KSU

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses-dev lib32ncurses-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig bc cpio rsync python3
        curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/bazel-archive-keyring.gpg > /dev/null
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
        sudo apt-get update && sudo apt-get install -y bazel
        
    - name: Setup repo tool
      run: |
        mkdir -p ~/.bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
        chmod a+rx ~/.bin/repo
        echo ~/.bin >> $GITHUB_PATH
        
    - name: Clone kernel source
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        mkdir android-kernel && cd android-kernel
        repo init -u https://android.googlesource.com/kernel/manifest -b common-android14-6.1-lts --depth=1
        repo sync -j$(nproc)
        
    - name: Setup KernelSU
      run: |
        cd android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
        
    - name: Setup SUSFS4KSU
      run: |
        cd android-kernel
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1 susfs4ksu
        
    - name: Apply SUSFS patches
      run: |
        cd android-kernel
        
        # Debug: List available patch files
        echo "Available patch files:"
        find ./susfs4ksu/kernel_patches/ -name "*.patch" 2>/dev/null || echo "No patch files found"
        
        # Copy KernelSU patch if it exists
        if [ -f "./susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch" ]; then
          cp ./susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch KernelSU/
          echo "Copied KernelSU patch"
        else
          echo "Warning: KernelSU patch not found"
        fi
        
        # Find and copy the appropriate kernel patch
        KERNEL_PATCH=""
        if [ -f "./susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch" ]; then
          KERNEL_PATCH="./susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch"
        elif [ -f "./susfs4ksu/kernel_patches/50_add_susfs_in_kernel-6.1.patch" ]; then
          KERNEL_PATCH="./susfs4ksu/kernel_patches/50_add_susfs_in_kernel-6.1.patch"
        elif [ -f "./susfs4ksu/kernel_patches/50_add_susfs_in_kernel.patch" ]; then
          KERNEL_PATCH="./susfs4ksu/kernel_patches/50_add_susfs_in_kernel.patch"
        elif [ -f "./susfs4ksu/kernel_patches/add_susfs_in_kernel.patch" ]; then
          KERNEL_PATCH="./susfs4ksu/kernel_patches/add_susfs_in_kernel.patch"
        fi
        
        if [ -n "$KERNEL_PATCH" ]; then
          cp "$KERNEL_PATCH" common/50_add_susfs_in_kernel.patch
          echo "Copied kernel patch: $KERNEL_PATCH"
        else
          echo "Error: No suitable kernel patch found"
          exit 1
        fi
        
        # Copy filesystem patches if they exist
        if [ -d "./susfs4ksu/kernel_patches/fs" ]; then
          cp -r ./susfs4ksu/kernel_patches/fs/* common/fs/
          echo "Copied fs patches"
        fi
        
        # Copy include patches if they exist
        if [ -d "./susfs4ksu/kernel_patches/include/linux" ]; then
          cp -r ./susfs4ksu/kernel_patches/include/linux/* common/include/linux/
          echo "Copied include patches"
        fi
        
        # Apply patches
        if [ -f "KernelSU/10_enable_susfs_for_ksu.patch" ]; then
          cd KernelSU && patch -p1 -F3 < 10_enable_susfs_for_ksu.patch
          echo "Applied KernelSU patch"
          cd ..
        fi
        
        if [ -f "common/50_add_susfs_in_kernel.patch" ]; then
          cd common && patch -p1 -F3 < 50_add_susfs_in_kernel.patch
          echo "Applied kernel patch"
          cd ..
        fi
        
    - name: Configure defconfig
      run: |
        cd android-kernel
        
        # Clean any previous build artifacts FIRST, before any config operations
        cd common
        make mrproper 2>/dev/null || true
        make clean 2>/dev/null || true
        rm -rf .config .config.old include/config include/generated arch/*/include/generated 2>/dev/null || true
        cd ..
        
        # Remove ABI exports dependency from BUILD.bazel and delete the files
        sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' common/BUILD.bazel
        rm -f common/android/abi_gki_protected_exports_*
        
        # Create a temporary config fragment with our KSU options
        cat > ksu_config.fragment << 'EOF'
        CONFIG_KSU=y
        CONFIG_KSU_SUSFS=y
        # CONFIG_KSU_SUSFS_SUS_MOUNT is not set
        CONFIG_KPROBES=y
        CONFIG_HAVE_KPROBES=y
        CONFIG_KPROBE_EVENTS=y
        EOF
        
        # Merge the config fragment with the base defconfig
        cd common
        ARCH=arm64 scripts/kconfig/merge_config.sh arch/arm64/configs/gki_defconfig ../ksu_config.fragment
        
        # Copy the merged config back to defconfig
        cp .config arch/arm64/configs/gki_defconfig
        
        # Generate a clean defconfig to ensure proper format
        make ARCH=arm64 savedefconfig
        cp defconfig arch/arm64/configs/gki_defconfig
        
        # Clean up again after config operations to ensure clean state for Bazel
        make mrproper 2>/dev/null || true
        
        cd ..
        
    - name: Build kernel
      run: |
        cd android-kernel
        bazel build //common:kernel_aarch64_dist
        
    - name: Extract and upload artifacts
      run: |
        cd android-kernel
        mkdir output
        find bazel-bin -name "Image.gz" -exec cp {} output/ \;
        find bazel-bin -name "*.dtb" -exec cp {} output/ \; || true
        cp common/.config output/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build
        path: android-kernel/output/*
